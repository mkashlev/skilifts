{"ast":null,"code":"import _taggedTemplateLiteral from \"/Users/dmitrykashlev/dev/ski/frontend/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/dmitrykashlev/dev/ski/frontend/src/weather.js\";\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n      {\\n        weatherForResort(id: 1, from: \\\"2019-01-01 00:00:00\\\") {\\n          temperature\\n        }\\n      }\\n    \"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from 'react';\nimport { Query } from \"react-apollo\";\nimport gql from \"graphql-tag\";\nimport { LineChart } from 'react-easy-chart';\n\nvar Weather = function Weather() {\n  return React.createElement(Query, {\n    query: gql(_templateObject()),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8\n    },\n    __self: this\n  }, function (_ref) {\n    var loading = _ref.loading,\n        error = _ref.error,\n        data = _ref.data;\n    if (loading) return React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18\n      },\n      __self: this\n    }, \"Loading...\");\n    if (error) return React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19\n      },\n      __self: this\n    }, \"Error :(\");\n    var temperatureData = data.weatherForResort.map(function (weather, indx) {\n      return {\n        x: indx + 1,\n        y: parseInt(weather.temperature)\n      };\n    });\n    console.log(temperatureData);\n    return React.createElement(LineChart, {\n      width: 1000,\n      height: 500,\n      axes: true,\n      data: [temperatureData],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25\n      },\n      __self: this\n    });\n  });\n};\n\nexport default Weather;","map":{"version":3,"sources":["/Users/dmitrykashlev/dev/ski/frontend/src/weather.js"],"names":["React","Query","gql","LineChart","Weather","loading","error","data","temperatureData","weatherForResort","map","weather","indx","x","y","parseInt","temperature","console","log"],"mappings":";;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,QAAsB,cAAtB;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,SAASC,SAAT,QAA0B,kBAA1B;;AAGA,IAAMC,OAAO,GAAG,SAAVA,OAAU;AAAA,SACd,oBAAC,KAAD;AACE,IAAA,KAAK,EAAEF,GAAF,mBADP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KASG,gBAA8B;AAAA,QAA3BG,OAA2B,QAA3BA,OAA2B;AAAA,QAAlBC,KAAkB,QAAlBA,KAAkB;AAAA,QAAXC,IAAW,QAAXA,IAAW;AAC7B,QAAIF,OAAJ,EAAa,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAP;AACb,QAAIC,KAAJ,EAAW,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAP;AACX,QAAME,eAAe,GAAID,IAAI,CAACE,gBAAL,CAAsBC,GAAtB,CAA0B,UAACC,OAAD,EAAUC,IAAV,EAAmB;AACpE,aAAO;AAACC,QAAAA,CAAC,EAAED,IAAI,GAAC,CAAT;AAAYE,QAAAA,CAAC,EAAEC,QAAQ,CAACJ,OAAO,CAACK,WAAT;AAAvB,OAAP;AACD,KAFwB,CAAzB;AAGAC,IAAAA,OAAO,CAACC,GAAR,CAAYV,eAAZ;AACA,WACE,oBAAC,SAAD;AACE,MAAA,KAAK,EAAE,IADT;AAEE,MAAA,MAAM,EAAE,GAFV;AAGE,MAAA,IAAI,MAHN;AAIE,MAAA,IAAI,EAAE,CAACA,eAAD,CAJR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAQD,GAxBH,CADc;AAAA,CAAhB;;AA8BA,eAAeJ,OAAf","sourcesContent":["import React from 'react'\nimport { Query } from \"react-apollo\";\nimport gql from \"graphql-tag\";\nimport { LineChart } from 'react-easy-chart';\n\n\nconst Weather = () => (\n  <Query\n    query={gql`\n      {\n        weatherForResort(id: 1, from: \"2019-01-01 00:00:00\") {\n          temperature\n        }\n      }\n    `}\n  >\n    {({ loading, error, data }) => {\n      if (loading) return <p>Loading...</p>;\n      if (error) return <p>Error :(</p>;\n      const temperatureData =  data.weatherForResort.map((weather, indx) => {\n        return {x: indx+1, y: parseInt(weather.temperature) }\n      })\n      console.log(temperatureData)\n      return (\n        <LineChart\n          width={1000}\n          height={500}\n          axes\n          data={[temperatureData]}\n        />\n      )\n    }}\n  </Query>\n);\n\n\nexport default Weather\n"]},"metadata":{},"sourceType":"module"}